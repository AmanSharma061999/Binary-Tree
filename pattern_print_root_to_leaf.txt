
import java.util.*;
public class Main
{
    public static class Node 
    {
        int data;
        Node left;
        Node right;
        Node(int data)
        {
            this.data=data;
        }
    }
    public static class Pair
    {
        int hd;
        Node node;
        Pair(int hd,Node node)
        {
            this.hd=hd;
            this.node=node;
        }
    }
    static void printpattern(ArrayList<Pair> res,int size)
    {
       int minimum_hd=Integer.MAX_VALUE;
       
       Pair curr;
       
       for(int i=0;i<res.size();i++)
       {
           curr=res.get(i);
           minimum_hd=Math.min(minimum_hd,curr.hd);
       }
       for(int i=0;i<res.size();i++)
       {
           Pair curr1=res.get(i);
           int no_of_underscores=Math.abs(curr1.hd-minimum_hd);
           
           for(int j=1;j<=no_of_underscores;j++)
           System.out.print("-");
           
           System.out.println(curr1.node.data);
       }
       System.out.println();
    }
    static void patternutil(Node root,int level,ArrayList<Pair> res,int size)
    {
        if(root==null)
        return;
        
        res.add(new Pair(level,root));
        
        if(root.left==null && root.right==null)
        {
            printpattern(res,size);
        }
        
        patternutil(root.left,level-1,res,size+1);
        patternutil(root.right,level+1,res,size+1);
        
         res.remove(res.size()-1);
    }
    static void pattern(Node root)
    {
        ArrayList<Pair> res= new ArrayList<>();
        patternutil(root,0,res,0);
    }
	public static void main(String[] args) 
	{
		/*Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.right = new Node(7);
        root.right.left = new Node(6);
        root.right.left.left= new Node(9);*/
        //root.right.right.left = new Node(11);
        
        Node root = new Node(1);
    root.left = new Node(2);
    root.right = new Node(3);
    root.left.left = new Node(4);
    root.left.right = new Node(5);
    root.right.left = new Node(6);
    root.right.right = new Node(7);
     
        
        //printspiral(root);
        pattern(root);
        
	}
}
